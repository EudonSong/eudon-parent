# 标准 Spring Boot 数据源配置
#spring:
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://rm-2ze66cjk287xy3e57wo.mysql.rds.aliyuncs.com:3306/test01?useUnicode=true&characterEncoding=UTF-8
#    username: eudon
#    password: Eudon061618

# ShardingSphere 5.x 分库分表配置 (优化版)
spring:
  shardingsphere:
    mode:
      type: Standalone
    datasource:
      names: db0,db1
      db0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://rm-2ze66cjk287xy3e57wo.mysql.rds.aliyuncs.com:3306/db0?useUnicode=true&characterEncoding=UTF-8
        username: eudon
        password: Eudon061618
      db1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://rm-2ze66cjk287xy3e57wo.mysql.rds.aliyuncs.com:3306/db1?useUnicode=true&characterEncoding=UTF-8
        username: eudon
        password: Eudon061618
    rules:
      sharding:
        # 绑定表规则，用于优化关联查询
        binding-tables:
          - tb_user,tb_user_info # user_id 分片键的表组
          - table_cont,table_fix,table_curt,table_curt_acc,table_fix_acc,table_curt_cont,table_fix_cont,table_custome # zone_val 分片键的表组
        tables:
          tb_user: &user_sharding
            actual-data-nodes: db${0..1}.tb_user_${'0001'..'0004'}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: group-a-db-sharding
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: group-a-table-sharding
          tb_user_info:
            <<: *user_sharding
            actual-data-nodes: db${0..1}.tb_user_info_${'0001'..'0004'}
        # 自动发现表规则 (替代手动配置每张表)
#        auto-tables:
#          # user_id 分片键的表组
#          group_a:
#            actual-data-sources: db0,db1
#            sharding-strategy:
#              standard:
#                sharding-column: user_id
#                sharding-algorithm-name: group-a-db-sharding
#            table-strategy:
#              standard:
#                sharding-column: user_id
#                sharding-algorithm-name: group-a-table-sharding
#            actual-data-nodes: db${0..1}.${['tb_user', 'tb_user_info']}_${'0001'..'0004'}
          
          # zone_val 分片键的表组
#          group_b:
#            actual-data-sources: db0,db1
#            sharding-strategy:
#              standard:
#                sharding-column: zone_val
#                sharding-algorithm-name: group-b-db-sharding
#            table-strategy:
#              standard:
#                sharding-column: zone_val
#                sharding-algorithm-name: group-b-table-sharding
#            actual-data-nodes: db${0..1}.${['table_cont','table_fix','table_curt','table_curt_acc','table_fix_acc','table_curt_cont','table_fix_cont','table_custome']}_${'0001'..'0004'}

        # 分片算法定义
        sharding-algorithms:
          # Group A (user_id) 的分片算法
          group-a-db-sharding:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.eudon.common.datasource.algorithm.GroupDatabaseShardingAlgorithm
          group-a-table-sharding:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.eudon.common.datasource.algorithm.GroupATableShardingAlgorithm
          
          # Group B (zone_val) 的分片算法
          group-b-db-sharding:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.eudon.common.datasource.algorithm.GroupDatabaseShardingAlgorithm
          group-b-table-sharding:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.eudon.common.datasource.algorithm.GroupBTableShardingAlgorithm
    
    props:
      sql-show: true
      sql-simple: false
